import unittest
from probabilidades import*

class casos(unittest.TestCase):
   
    def tescanicas(self):
        M=[[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (1, 0)],
           [(0, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
           [(0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
           [(1, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)]]
        N=0
        V=[[(6, 0), (2, 0), (1, 0), (5, 0), (3, 0), (10, 0)]]
        Mf=[[(0,0)],[(0,0)],[(12,0)],[(5,0)],[(1,0)],[(9,0)]]
        assert canicas(M,N,V)==Mf
 
    def testbalas(self):
        Mf = [[(0.0, 0.0)],
              [(0.0, 0.0)],
              [(0.0, 0.0)],
              [(0.16666666666666666, 0.0)],
              [(0.16666666666666666, 0.0)],
              [(0.3333333333333333, 0.0)],
              [(0.16666666666666666, 0.0)],
              [(0.16666666666666666, 0.0)]]
        M = [[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(1 / 2, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(1 / 2, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(0, 0), (1 / 3, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
             [(0, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
             [(0, 0), (1 / 3, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
             [(0, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],
             [(0, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]]
        N = 1
        v = [[(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]]
        assert balas(M, N, v) == Mf
    
    def Doble_redija(self):
        Mf = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.16666666666666666, 0.3333333333333333, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
              [0.16666666666666666, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
              [0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0],
              [0.16666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 1.0, 0.0],
              [0.16666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0]]
        M = [[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(1 / 6, 0), (1 / 3, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
           [(1 / 6, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
           [(0, 0), (1 / 3, 0), (1 / 3, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
           [(1 / 6, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],
           [(1 / 6, 0), (0, 0), (1 / 3, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]]
        N = 1
        assert Doble_redija(M, N) == Mf
    
  
if __name__== "__main__" :unittest.main()
